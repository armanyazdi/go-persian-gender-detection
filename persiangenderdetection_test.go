package persiangenderdetection

import (
	"testing"
)

func TestClearName(t *testing.T) {
	tests := []struct {
		input    string
		expected string
	}{
		{"  Ø¹Ù€Ù€Ù€Ù€Ù„ÛŒ  ", "Ø¹Ù„ÛŒ"},
		{"Ø¨ÛŒÙ€Ù€ðŸ¥²Ù€Ù€ØªØ§", "Ø¨ÛŒØªØ§"},
		{"Ù…Ø­Ù€Ù€ðŸŒšÙ€Ù€Ù…Ø¯", "Ù…Ø­Ù…Ø¯"},
		{"Û±Û²Û³Ù…Ù‡Ù†Ø§Ø²Û´ÛµÛ¶", "Ù…Ù‡Ù†Ø§Ø²"},
		{"Ù…Ù‡Ø¯ÙŠ-1980", "Ù…Ù‡Ø¯ÛŒ"},
		{"", ""},
	}

	for _, test := range tests {
		result := clearName(test.input)
		if result != test.expected {
			t.Errorf("clearName(%s) = %s; expected %s", test.input, result, test.expected)
		}
	}
}

func TestGetGender(t *testing.T) {
	tests := []struct {
		name     string
		expected string
	}{
		{"Ø¢Ø±Ù…Ø§Ù†", "MALE"},
		{"Ø¨Ø§Ø¨Ùƒ Ø¢Ø°Ø± Ù…Ù‡Ø±", "MALE"},
		{"Ø¨ÛŒ Ø¨ÛŒ Ø³Ù„Ø·Ø§Ù†", "FEMALE"},
		{"Ø´ÛŒØ¯Ø§ Ø¹Ù„ÛŒØ²Ø§Ø¯Ù‡", "FEMALE"},
		{"Ù…Ù…Ø¯ Ø±Ø¶Ø§", "MALE"},
		{"Ù¾Ø§Ù†ØªÙ‡â€ŒØ¢ Ø¹ÙŽØ¨Ù‘Ø§Ø³ÛŒ", "FEMALE"},
		{"Ø¯Ú©ØªØ± Ù†Ø¯Ø§ Ø­Ø³ÛŒÙ†ÛŒ", "FEMALE"}, // Name with prefix
		{"Ø³ÛŒØ¯ Ø§Ù…ÛŒØ± Ù…ÙˆØ³ÙˆÛŒ", "MALE"},   // Name with prefix
		{"Ø¬Ù†Ø§Ø¨ Ø¢Ù‚Ø§ÛŒ X", "MALE"},      // Name with prefix
		{"Ø³Ø±Ú©Ø§Ø± Ø®Ø§Ù†Ù… Y", "FEMALE"},   // Name with prefix
		{"", "UNKNOWN"},              // Empty name
		{"0", "UNKNOWN"},             // Name not in dataset
	}

	for _, test := range tests {
		result := GetGender(test.name)
		if result != test.expected {
			t.Errorf("GetGender(%s) = %s; expected %s", test.name, result, test.expected)
		}
	}
}

func TestIsUnwantedRune(t *testing.T) {
	tests := []struct {
		r        rune
		expected bool
	}{
		{'!', true},       // Punctuation
		{'Ø¢', false},      // Valid character
		{'Ù€', false},      // Specific unwanted rune
		{'1', true},       // Digit
		{'\u200c', false}, // Zero width non-joiner
	}

	for _, test := range tests {
		result := isUnwantedRune(test.r)
		if result != test.expected {
			t.Errorf("isUnwantedRune(%c) = %t; expected %t", test.r, result, test.expected)
		}
	}
}
